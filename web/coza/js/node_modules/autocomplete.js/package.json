{
  "_args": [
    [
      {
        "raw": "autocomplete.js",
        "scope": null,
        "escapedName": "autocomplete.js",
        "name": "autocomplete.js",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\Ampps\\www\\kantor\\step2\\development\\web\\coza\\js"
    ]
  ],
  "_from": "autocomplete.js@latest",
  "_id": "autocomplete.js@0.30.0",
  "_inCache": true,
  "_location": "/autocomplete.js",
  "_nodeVersion": "6.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/autocomplete.js_0.30.0_1525079627141_0.08923096296074307"
  },
  "_npmUser": {
    "name": "redox",
    "email": "sylvain.utard@gmail.com"
  },
  "_npmVersion": "5.0.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "autocomplete.js",
    "scope": null,
    "escapedName": "autocomplete.js",
    "name": "autocomplete.js",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/autocomplete.js/-/autocomplete.js-0.30.0.tgz",
  "_shasum": "e7a1425474291d255911499cee2a3c5624c9ccc5",
  "_shrinkwrap": null,
  "_spec": "autocomplete.js",
  "_where": "D:\\Ampps\\www\\kantor\\step2\\development\\web\\coza\\js",
  "bugs": {
    "url": "https://github.com/algolia/autocomplete.js/issues"
  },
  "dependencies": {
    "immediate": "^3.2.3"
  },
  "description": "Fast and fully-featured autocomplete library",
  "devDependencies": {
    "angular": "^1.6.4",
    "angular-mocks": "^1.6.4",
    "babel-eslint": "^7.2.3",
    "chai": "^3.5.0",
    "colors": "^1.1.2",
    "conventional-changelog-cli": "^1.3.1",
    "doctoc": "^1.3.0",
    "eslint": "1.5.1",
    "eslint-config-airbnb": "0.1.0",
    "eslint-config-algolia": "3.0.0",
    "grunt": "^1.0.1",
    "grunt-banner": "^0.6.0",
    "grunt-cli": "1.2.0",
    "grunt-concurrent": "^2.3.1",
    "grunt-contrib-clean": "^1.1.0",
    "grunt-contrib-concat": "^1.0.1",
    "grunt-contrib-connect": "^1.0.2",
    "grunt-contrib-uglify": "^2.2.0",
    "grunt-contrib-watch": "^1.0.0",
    "grunt-eslint": "^17.2.0",
    "grunt-exec": "^1.0.1",
    "grunt-sed": "^0.1.1",
    "grunt-step": "^1.0.0",
    "grunt-umd": "^2.3.6",
    "grunt-webpack": "^1.0.14",
    "istanbul-instrumenter-loader": "^1.0.0",
    "jasmine-core": "^2.6.2",
    "jasmine-jquery": "^2.1.1",
    "jquery": "^3.2.1",
    "json": "^9.0.6",
    "karma": "^1.7.0",
    "karma-chrome-launcher": "^2.1.1",
    "karma-coverage": "^1.1.1",
    "karma-coveralls": "^1.1.2",
    "karma-firefox-launcher": "^1.0.1",
    "karma-jasmine": "^1.0.2",
    "karma-opera-launcher": "^1.0.0",
    "karma-phantomjs-launcher": "^1.0.4",
    "karma-safari-launcher": "^1.0.0",
    "karma-sinon": "^1.0.5",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^2.0.3",
    "mocha": "^3.4.1",
    "mversion": "^1.10.1",
    "node-static": "^0.7.8",
    "phantomjs-prebuilt": "^2.1.12",
    "semver": "^5.3.0",
    "sinon": "^1.17.6",
    "webpack": "^1.13.2",
    "webpack-dev-server": "^1.16.1",
    "yiewd": "^0.6.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-/+NwCEgFFtMrPXVyOr92JlmiDUpJWmPUUyX64e0vYw6WBD74hiVcLpxb4UjWQQf1dhYaveAgD6NmnDtNwBAV6A==",
    "shasum": "e7a1425474291d255911499cee2a3c5624c9ccc5",
    "tarball": "https://registry.npmjs.org/autocomplete.js/-/autocomplete.js-0.30.0.tgz",
    "fileCount": 71,
    "unpackedSize": 954572,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa5t5NCRA9TVsSAnZWagAAN0cP/Re7N9ai7LQUqQzj0y0k\nJ/oYqB6D86k6qB088S2x8/f6lwhFVnRou9WhI0f4ozOLcWjF6myQo3FhmKjT\nJfmCuhQUQ1iHNrvFWwDSuE0MsZR2aur3Olrks5/nP/Bw5sYm+NBOpn872ulz\na+4UNu5HpLaSbvxkSWFtT39Za5IGYnhiCNHXkYgx96iKFFXK6Q5epMoBYVgK\nWiifuvmn+NcIFb/+9pge97L6Zl353vCxlsONkXalXJlPwQFPVW3byA7pp5z1\nOkXi+dQmSflHt/plBItbBHglOfWFFNF/eB5aN8y8l5JF/fCkE9R8QMfi9L20\nz7337T1bytf/Dc2Y825KyvD+BZGl2527LUmIiTHG4426cgp07Z6opkE8+aYu\n5/tR2PpYrFy4hcfDEdX6RNGWXpqPgtzH/5A6/JeYotdQW6/5jZU/MhVAGMKi\nLkYHEsp4T+0UQ37iGtNcjcO99OpbacReFppzcuHPm9XSSdFRSajk3SZZ1YXA\n/RpHEtuhasua7d+pdJU3mYW7MI4jup/oTPaAQbghH4mCbSeeTqUnrV1Vc7nK\nQjjwqxMF8ukdjFZiDn4E5c1w6Pn6TN2mTtt1crHDpgEh2nCyB9/9HFJ+gBbu\n16OFY5QfGvBOUXyLDn/ULS9tGeCHzDV/vZ3bXb5Ko5WJaLxk4abr+XA/Wanf\nG/Ex\r\n=4+SB\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "48b597f68b7beb3afb4a703310813e13e28491f0",
  "homepage": "https://github.com/algolia/autocomplete.js",
  "keywords": [
    "autocomplete",
    "typeahead"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "bobylito",
      "email": "bobylito@gmail.com"
    },
    {
      "name": "cbaptiste",
      "email": "coquellebaptiste@gmail.com"
    },
    {
      "name": "francoischalifour",
      "email": "francois.chalifour@gmail.com"
    },
    {
      "name": "haroenv",
      "email": "hello@haroen.me"
    },
    {
      "name": "iam4x",
      "email": "iam4x@me.com"
    },
    {
      "name": "jerska",
      "email": "matthieu.dumont@algolia.com"
    },
    {
      "name": "jonmontane",
      "email": "jon@stratus.one"
    },
    {
      "name": "mthuret",
      "email": "mlthutrix@gmail.com"
    },
    {
      "name": "pixelastic",
      "email": "tim@pixelastic.com"
    },
    {
      "name": "proudlygeek",
      "email": "g.bargelli@gmail.com"
    },
    {
      "name": "raphi",
      "email": "raphael.daguenet@algolia.com"
    },
    {
      "name": "rayrutjes",
      "email": "raymond.rutjes@gmail.com"
    },
    {
      "name": "redox",
      "email": "sylvain.utard@gmail.com"
    },
    {
      "name": "ronanlevesque",
      "email": "ronan.levesque@gmail.com"
    },
    {
      "name": "samouss",
      "email": "samuel.vllnt@gmail.com"
    },
    {
      "name": "speedblue",
      "email": "support@algolia.com"
    },
    {
      "name": "therealwebby",
      "email": "alex@alexjwebb.com"
    },
    {
      "name": "vvo",
      "email": "vincent.voyer@gmail.com"
    }
  ],
  "name": "autocomplete.js",
  "optionalDependencies": {},
  "readme": "# Autocomplete.js\n\n\nThis JavaScript library adds a fast and fully-featured auto-completion menu to your search box displaying results \"as you type\". It can easily be combined with Algolia's realtime search engine. The library is available as a jQuery plugin, an Angular.js directive or a standalone library.\n\n[![build status](https://travis-ci.org/algolia/algoliasearch-client-node.svg?branch=master)](http://travis-ci.org/algolia/autocomplete.js)\n[![NPM version](https://badge.fury.io/js/autocomplete.js.svg)](http://badge.fury.io/js/autocomplete.js)\n[![Coverage Status](https://coveralls.io/repos/algolia/autocomplete.js/badge.svg?branch=master)](https://coveralls.io/r/algolia/autocomplete.js?branch=master)\n[![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/autocomplete.js/badge?style=rounded)](https://www.jsdelivr.com/package/npm/autocomplete.js)\n![jQuery](https://img.shields.io/badge/jQuery-OK-blue.svg)\n![Zepto.js](https://img.shields.io/badge/Zepto.js-OK-blue.svg)\n![Angular.js](https://img.shields.io/badge/Angular.js-OK-blue.svg)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n\n[![Browser tests](https://saucelabs.com/browser-matrix/opensauce-algolia.svg)](https://saucelabs.com/u/opensauce-algolia)\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Features](#features)\n- [Installation](#installation)\n  - [jsDelivr](#jsdelivr)\n  - [cdnjs](#cdnjs)\n  - [npm](#npm)\n  - [Bower](#bower)\n  - [Source dist/](#source-dist)\n  - [Browserify](#browserify)\n- [Usage](#usage)\n  - [Standalone](#standalone)\n  - [jQuery](#jquery)\n  - [Angular.JS](#angularjs)\n- [Look and Feel](#look-and-feel)\n- [Options](#options)\n- [Datasets](#datasets)\n- [Sources](#sources)\n  - [Hits](#hits)\n  - [PopularIn (aka \"xxxxx in yyyyy\")](#popularin-aka-xxxxx-in-yyyyy)\n  - [Custom source](#custom-source)\n- [Security](#security)\n  - [User-generated data: protecting against XSS](#user-generated-data-protecting-against-xss)\n- [Events](#events)\n- [API](#api)\n  - [jQuery](#jquery-1)\n  - [Standalone](#standalone-1)\n- [Development](#development)\n- [Tests](#tests)\n  - [Testing accessibility](#testing-accessibility)\n- [Release](#release)\n- [Credits](#credits)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n* Displays suggestions to end-users as they type\n* Shows top suggestion as a hint (i.e. background text)\n* Supports custom templates to allow for UI flexibility\n* Works well with RTL languages and input method editors\n* Triggers custom events\n\n\n## Installation\n\nThe `autocomplete.js` library must be included **after** jQuery, Zepto or Angular.js (with jQuery).\n\n### jsDelivr\n\n```html\n<script src=\"https://cdn.jsdelivr.net/autocomplete.js/0/autocomplete.min.js\"></script>\n<!-- OR -->\n<script src=\"https://cdn.jsdelivr.net/autocomplete.js/0/autocomplete.jquery.min.js\"></script>\n<!-- OR -->\n<script src=\"https://cdn.jsdelivr.net/autocomplete.js/0/autocomplete.angular.min.js\"></script>\n```\n\n### cdnjs\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/autocomplete.js/<VERSION>/autocomplete.min.js\"></script>\n<!-- OR -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/autocomplete.js/<VERSION>/autocomplete.jquery.min.js\"></script>\n<!-- OR -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/autocomplete.js/<VERSION>/autocomplete.angular.min.js\"></script>\n```\n\n### npm\n\n```sh\nnpm install --save autocomplete.js\n```\n\n### Bower\n\n```sh\nbower install algolia-autocomplete.js -S\n```\n\n### Source dist/\n\nYou can find the built version in [dist/](https://github.com/algolia/autocomplete.js/tree/master/dist).\n\n### Browserify\n\nYou can require it and use [Browserify](http://browserify.org/):\n\n```js\nvar autocomplete = require('autocomplete.js');\n```\n\n## Usage\n\n### Standalone\n\n 1. Include `autocomplete.min.js`\n 1. Initialize the auto-completion menu calling the `autocomplete` function\n\n```html\n<input type=\"text\" id=\"search-input\" placeholder=\"Search unicorns...\" />\n\n<!-- [ ... ] -->\n<script src=\"https://cdn.jsdelivr.net/algoliasearch/3/algoliasearch.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/autocomplete.js/0/autocomplete.min.js\"></script>\n<script>\n  var client = algoliasearch('YourApplicationID', 'YourSearchOnlyAPIKey');\n  var index = client.initIndex('YourIndex');\n  autocomplete('#search-input', { hint: false }, [\n    {\n      source: autocomplete.sources.hits(index, { hitsPerPage: 5 }),\n      displayKey: 'my_attribute',\n      templates: {\n        suggestion: function(suggestion) {\n          return suggestion._highlightResult.my_attribute.value;\n        }\n      }\n    }\n  ]).on('autocomplete:selected', function(event, suggestion, dataset) {\n    console.log(suggestion, dataset);\n  });\n</script>\n```\n\n### jQuery\n\n 1. Include `autocomplete.jquery.min.js` after including `jQuery`\n 1. Initialize the auto-completion menu calling the `autocomplete` jQuery plugin\n\n```html\n<input type=\"text\" id=\"search-input\" />\n\n<!-- [ ... ] -->\n<script src=\"https://cdn.jsdelivr.net/algoliasearch/3/algoliasearch.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/autocomplete.js/0/autocomplete.jquery.min.js\"></script>\n<script>\n  var client = algoliasearch('YourApplicationID', 'YourSearchOnlyAPIKey')\n  var index = client.initIndex('YourIndex');\n  $('#search-input').autocomplete({ hint: false }, [\n    {\n      source: $.fn.autocomplete.sources.hits(index, { hitsPerPage: 5 }),\n      displayKey: 'my_attribute',\n      templates: {\n        suggestion: function(suggestion) {\n          return suggestion._highlightResult.my_attribute.value;\n        }\n      }\n    }\n  ]).on('autocomplete:selected', function(event, suggestion, dataset) {\n    console.log(suggestion, dataset);\n  });\n</script>\n```\n\n### Angular.JS\n\n 1. Include `autocomplete.angular.min.js` after including `jQuery` & `Angular.js`\n 1. Inject the `algolia.autocomplete` module\n 1. Add the `autocomplete`, `aa-datasets` and the optional `aa-options` attribute to your search bar\n\n```html\n<div ng-controller=\"yourController\">\n  <input type=\"text\" id=\"search-input\" autocomplete aa-datasets=\"getDatasets()\" />\n</div>\n\n<!-- [ include jQuery + Angular.js ] -->\n<script src=\"https://cdn.jsdelivr.net/algoliasearch/3/algoliasearch.angular.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/autocomplete.js/0/autocomplete.angular.min.js\"></script>\n<script>\n  angular.module('myApp', ['algoliasearch', 'algolia.autocomplete'])\n    .controller('yourController', ['$scope', 'algolia', function($scope, algolia) {\n      var client = algolia.Client('YourApplicationID', 'YourSearchOnlyAPIKey');\n      var index = client.initIndex('YourIndex');\n\n      $scope.getDatasets = function() {\n        return {\n          source: algolia.sources.hits(index, { hitsPerPage: 5 }),\n          displayKey: 'my_attribute',\n          templates: {\n            suggestion: function(suggestion) {\n              return suggestion._highlightResult.my_attribute.value;\n            }\n          }\n        };\n      };\n\n      $scope.$on('autocomplete:selected', function(event, suggestion, dataset) {\n        console.log(suggestion, dataset);\n      });\n    }]);\n</script>\n```\n\n**Note:** You need to rely on `jQuery`, the lite version embedded in Angular.js won't work.\n\n## Look and Feel\n\nBelow is a faux mustache template describing the DOM structure of an autocomplete\ndropdown menu. Keep in mind that `header`, `footer`, `suggestion`, and `empty`\ncome from the provided templates detailed [here](#datasets).\n\n```html\n<span class=\"aa-dropdown-menu{{#datasets}} aa-{{'with' or 'without'}}-{{name}}{{/datasets}}\">\n  {{#datasets}}\n    <div class=\"aa-dataset-{{name}}\">\n      {{{header}}}\n      <span class=\"aa-suggestions\">\n        {{#suggestions}}\n          <div class=\"aa-suggestion\">{{{suggestion}}}</div>\n        {{/suggestions}}\n        {{^suggestions}}\n          {{{empty}}}\n        {{/suggestions}}\n      </span>\n      {{{footer}}}\n    </div>\n  {{/datasets}}\n  {{empty}}\n</span>\n```\n\nWhen an end-user mouses or keys over a `.aa-suggestion`, the class `aa-cursor` will be added to it. You can use this class as a hook for styling the \"under cursor\" state of suggestions.\n\n\nAdd the following CSS rules to add a default style:\n\n```css\n.algolia-autocomplete {\n  width: 100%;\n}\n.algolia-autocomplete .aa-input, .algolia-autocomplete .aa-hint {\n  width: 100%;\n}\n.algolia-autocomplete .aa-hint {\n  color: #999;\n}\n.algolia-autocomplete .aa-dropdown-menu {\n  width: 100%;\n  background-color: #fff;\n  border: 1px solid #999;\n  border-top: none;\n}\n.algolia-autocomplete .aa-dropdown-menu .aa-suggestion {\n  cursor: pointer;\n  padding: 5px 4px;\n}\n.algolia-autocomplete .aa-dropdown-menu .aa-suggestion.aa-cursor {\n  background-color: #B2D7FF;\n}\n.algolia-autocomplete .aa-dropdown-menu .aa-suggestion em {\n  font-weight: bold;\n  font-style: normal;\n}\n```\n\nHere is what the [basic example](https://github.com/algolia/autocomplete.js/tree/master/examples) looks like:\n\n![Basic example](./examples/basic.gif)\n\n## Options\n\nWhen initializing an autocomplete, there are a number of options you can configure.\n\n* `autoselect` – If `true`, the first rendered suggestion in the dropdown will automatically have the `cursor` class, and pressing `<ENTER>` will select it.\n\n* `autoselectOnBlur` – If `true`, when the input is blurred, the first rendered suggestion in the dropdown will automatically have the `cursor` class, and pressing `<ENTER>` will select it. This option should be used on mobile, see [#113](https://github.com/algolia/autocomplete.js/issues/113)\n\n* `hint` – If `false`, the autocomplete will not show a hint. Defaults to `true`.\n\n* `debug` – If `true`, the autocomplete will not close on `blur`. Defaults to `false`.\n\n* `openOnFocus` – If `true`, the dropdown menu will open when the input is focused. Defaults to `false`.\n\n* `appendTo` – If set with a DOM selector, doesn't wrap the input and appends the wrapper and dropdown menu to the first DOM element matching the selector. It automatically positions the wrapper under the input, and sets it to the same width as the input. Can't be used with `hint: true`, because `hint` requires the wrapper around the input.\n\n* `dropdownMenuContainer` – If set with a DOM selector, it overrides the container of the dropdown menu.\n\n* `templates` – An optional hash overriding the default templates.\n  * `dropdownMenu` – the dropdown menu template. The template should include all *dataset* placeholders.\n  * `header` – the header to prepend to the dropdown menu\n  * `footer` – the footer to append to the dropdown menu\n  * `empty` – the template to display when none of the datasets are returning results. The templating function\n    is called with a context containing the underlying `query`.\n\n* `cssClasses` – An optional hash overriding the default css classes.\n  * `root` – the root classes. Defaults to `algolia-autocomplete`.\n  * `prefix` – the CSS class prefix of all nested elements. Defaults to `aa`.\n  * `noPrefix` - set this to true if you wish to not use any prefix. Without this option, all nested elements classes will have a leading dash. Defaults to `false`.\n  * `dropdownMenu` – the dropdown menu CSS class. Defaults to `dropdown-menu`.\n  * `input` – the input CSS class. Defaults to `input`.\n  * `hint` – the hint CSS class. Defaults to `hint`.\n  * `suggestions` – the suggestions list CSS class. Defaults to `suggestions`.\n  * `suggestion` – the suggestion wrapper CSS class. Defaults to `suggestion`.\n  * `cursor` – the cursor CSS class. Defaults to `cursor`.\n  * `dataset` – the dataset CSS class. Defaults to `dataset`.\n  * `empty` – the empty CSS class. Defaults to `empty`.\n\n* `keyboardShortcuts` - Array of shortcut that will focus the input. For example if you want to bind `s` and `/`\n you can specify: `keyboardShortcuts: ['s', '/']`\n\n* `ariaLabel` - An optional string that will populate the `aria-label` attribute.\n\n```html\n<script type=\"text/template\" id=\"my-custom-menu-template\">\n  <div class=\"my-custom-menu\">\n    <div class=\"row\">\n      <div class=\"col-sm-6\">\n        <div class=\"aa-dataset-d1\"></div>\n      </div>\n      <div class=\"col-sm-6\">\n        <div class=\"aa-dataset-d2\"></div>\n        <div class=\"aa-dataset-d3\"></div>\n      </div>\n    </div>\n  </div>\n</script>\n<style>\nbody {\n\tfont-family: -apple-system, sans-serif;\n}\n.algolia-autocomplete {\n  width: 100%;\n}\n.algolia-autocomplete .aa-input, .algolia-autocomplete .aa-hint {\n  width: 100%;\n}\n.algolia-autocomplete .aa-hint {\n  color: #999;\n}\n.algolia-autocomplete .aa-dropdown-menu {\n  width: 100%;\n  background-color: #fff;\n  border: 1px solid #999;\n  border-top: none;\n}\n.algolia-autocomplete .aa-dropdown-menu .aa-suggestion {\n  cursor: pointer;\n  padding: 5px 4px;\n}\n.algolia-autocomplete .aa-dropdown-menu .aa-suggestion.aa-cursor {\n  background-color: #B2D7FF;\n}\n.algolia-autocomplete .aa-dropdown-menu .aa-suggestion em {\n  font-weight: bold;\n  font-style: normal;\n}\n\n.branding {\nfont-size: 1.3em;\nmargin: 0.5em 0.2em;\n}\n\n.branding img {\n\theight: 1.3em;\n\tmargin-bottom: - 0.3em;\n}\n</style>\n<script>\n  $('#search-input').autocomplete(\n    {\n      templates: {\n        dropdownMenu: '#my-custom-menu-template',\n        footer: '<div class=\"branding\">Powered by <img src=\"https://www.algolia.com/static_assets/images/press/downloads/algolia-logo-light.svg\" /></div>'\n      }\n    },\n    [\n      {\n        source: $.fn.autocomplete.sources.hits(index1, { hitsPerPage: 5 }),\n        name: 'd1',\n        templates: {\n          header: '<h4>List 1</h4>',\n          suggestion: function(suggestion) {\n            // FIXME\n          }\n        }\n      },\n      {\n        source: $.fn.autocomplete.sources.hits(index2, { hitsPerPage: 2 }),\n        name: 'd2',\n        templates: {\n          header: '<h4>List 2</h4>',\n          suggestion: function(suggestion) {\n            // FIXME\n          }\n        }\n      },\n      {\n        source: $.fn.autocomplete.sources.hits(index3, { hitsPerPage: 2 }),\n        name: 'd3',\n        templates: {\n          header: '<h4>List 3</h4>',\n          suggestion: function(suggestion, answer) {\n            // FIXME\n          }\n        }\n      }\n    ]\n  );\n</script>\n```\n\n* `minLength` – The minimum character length needed before suggestions start\n  getting rendered. Defaults to `1`.\n\n* `autoWidth` – This option allow you to control the width of autocomplete wrapper. When `false` the autocomplete wrapper will not have the width style attribute and you are be able to put your specific width property in your css to control the wrapper. Default value is `true`.\n\nOne scenario for use this option. e.g. You have a `max-width` css attribute in your `autocomplete-dropdown-menu` and you need to width grows until fill the `max-width`. In this scenario you put a `width: auto` in your autocomplete wrapper css class and the `max-width` in your autocomplete dropdown class and all done.\n\n## Datasets\n\nAn autocomplete is composed of one or more datasets. When an end-user modifies the\nvalue of the underlying input, each dataset will attempt to render suggestions for the\nnew value.\n\nDatasets can be configured using the following options.\n\n* `source` – The backing data source for suggestions. Expected to be a function\n  with the signature `(query, cb)`. It is expected that the function will\n  compute the suggestion set (i.e. an array of JavaScript objects) for `query`\n  and then invoke `cb` with said set. `cb` can be invoked synchronously or\n  asynchronously.\n\n* `name` – The name of the dataset. This will be appended to `tt-dataset-` to\n  form the class name of the containing DOM element.  Must only consist of\n  underscores, dashes, letters (`a-z`), and numbers. Defaults to a random\n  number.\n\n* `displayKey` – For a given suggestion object, determines the string\n  representation of it. This will be used when setting the value of the input\n  control after a suggestion is selected. Can be either a key string or a\n  function that transforms a suggestion object into a string. Defaults to\n  `value`.\n  Example function usage: `displayKey: function(suggestion) { return suggestion.nickname || suggestion.firstName }`\n\n* `templates` – A hash of templates to be used when rendering the dataset. Note\n  a precompiled template is a function that takes a JavaScript object as its\n  first argument and returns a HTML string.\n\n  * `empty` – Rendered when `0` suggestions are available for the given query.\n  Can be either a HTML string or a precompiled template. The templating function\n  is called with a context containing `query`, `isEmpty`, and any optional\n  arguments that may have been forwarded by the source:\n  `function emptyTemplate({ query, isEmpty }, [forwarded args])`.\n\n  * `footer` – Rendered at the bottom of the dataset. Can be either a HTML\n  string or a precompiled template. The templating function\n  is called with a context containing `query`, `isEmpty`, and any optional\n  arguments that may have been forwarded by the source:\n  `function footerTemplate({ query, isEmpty }, [forwarded args])`.\n\n  * `header` – Rendered at the top of the dataset. Can be either a HTML string\n  or a precompiled template. The templating function\n  is called with a context containing `query`, `isEmpty`, and any optional\n  arguments that may have been forwarded by the source:\n  `function headerTemplate({ query, isEmpty }, [forwarded args])`.\n\n  * `suggestion` – Used to render a single suggestion. The templating function\n  is called with the `suggestion`, and any optional arguments that may have\n  been forwarded by the source: `function suggestionTemplate(suggestion, [forwarded args])`.\n  Defaults to the value of `displayKey` wrapped in a `p` tag i.e. `<p>{{value}}</p>`.\n\n  * `debounce` – If set, will postpone the source execution until after `debounce` milliseconds\n  have elapsed since the last time it was invoked.\n\n\n## Sources\n\nA few helpers are provided by default to ease the creation of Algolia-based sources.\n\n### Hits\n\nTo build a source based on Algolia's `hits` array, just use:\n\n```js\n{\n  source: autocomplete.sources.hits(indexObj, { hitsPerPage: 2 }),\n  templates: {\n    suggestion: function(suggestion, answer) {\n      // FIXME\n    }\n  }\n}\n```\n\n### PopularIn (aka \"xxxxx in yyyyy\")\n\nTo build an Amazon-like autocomplete menu, suggesting popular queries and for the most popular one displaying the associated categories, you can use the `popularIn` source:\n\n```js\n{\n  source: autocomplete.sources.popularIn(popularQueriesIndexObj, { hitsPerPage: 3 }, {\n    source: 'sourceAttribute',           // attribute of the `popularQueries` index use to query the `index` index\n    index: productsIndexObj,             // targeted index\n    facets: 'facetedCategoryAttribute',  // facet used to enrich the most popular query\n    maxValuesPerFacet: 3                 // maximum number of facets returned\n  }, {\n    includeAll: true,                    // should it include an extra \"All department\" suggestion\n    allTitle: 'All departments'          // the included category label\n  }),\n  templates: {\n    suggestion: function(suggestion, answer) {\n      var value = suggestion.sourceAttribute;\n      if (suggestion.facet) {\n        // this is the first suggestion\n        // and it has been enriched with the matching facet\n        value += ' in ' + suggestion.facet.value + ' (' + suggestion.facet.count + ')';\n      }\n      return value;\n    }\n  }\n}\n```\n\n### Custom source\n\nThe `source` options can also take a function. It enables you to have more control of the results returned by Algolia search. The function `function(query, callback)` takes 2 parameters\n  * `query: String`: the text typed in the autocomplete\n  * `callback: Function`: the callback to call at the end of your processing with the array of suggestions\n\n```js\nsource: function(query, callback) {\n  var index = client.initIndex('myindex');\n  index.search(query, { hitsPerPage: 1, facetFilters: 'category:mycat' }).then(function(answer) {\n    callback(answer.hits);\n  }, function() {\n    callback([]);\n  });\n}\n```\n\nOr by reusing an existing source:\n\n```js\nvar hitsSource = autocomplete.sources.hits(index, { hitsPerPage: 5 });\n\nsource: function(query, callback) {\n  hitsSource(query, function(suggestions) {\n    // FIXME: Do stuff with the array of returned suggestions\n    callback(suggestions);\n  });\n}\n```\n\n## Security\n\n### User-generated data: protecting against XSS\n\nMalicious users may attempt to engineer XSS attacks by storing HTML/JS in their data. It is important that user-generated data be properly escaped before using it in an *autocomplete.js* template.\n\nIn order to easily do that, *autocomplete.js* provides you with a helper function escaping all HTML code but the highlighting tags:\n\n```js\n  templates: {\n    suggestion: function(suggestion) {\n      var val = suggestion._highlightResult.name.value;\n      return autocomplete.escapeHighlightedString(val);\n    }\n  }\n```\n\nIf you did specify custom highlighting pre/post tags, you can specify them as 2nd and 3rd parameter:\n\n```js\n  templates: {\n    suggestion: function(suggestion) {\n      var val = suggestion._highlightResult.name.value;\n      return autocomplete.escapeHighlightedString(val, '<span class=\"highlighted\">', '</span>');\n    }\n  }\n```\n\n## Events\n\nThe autocomplete component triggers the following custom events.\n\n* `autocomplete:opened` – Triggered when the dropdown menu of the autocomplete is\n  opened.\n\n* `autocomplete:shown` – Triggered when the dropdown menu of the autocomplete is\n  shown (opened and non-empty).\n\n* `autocomplete:empty` – Triggered when all datasets are empty.\n\n* `autocomplete:closed` – Triggered when the dropdown menu of the autocomplete is\n  closed.\n\n* `autocomplete:updated` – Triggered when a dataset is rendered.\n\n* `autocomplete:cursorchanged` – Triggered when the dropdown menu cursor is moved\n  to a different suggestion. The event handler will be invoked with 3\n  arguments: the jQuery event object, the suggestion object, and the name of\n  the dataset the suggestion belongs to.\n\n* `autocomplete:selected` – Triggered when a suggestion from the dropdown menu is\n  selected. The event handler will be invoked with 3 arguments: the jQuery\n  event object, the suggestion object, and the name of the dataset the\n  suggestion belongs to.\n\n* `autocomplete:cursorremoved` – Triggered when the cursor leaves the selections\n  or its current index is lower than 0\n\n* `autocomplete:autocompleted` – Triggered when the query is autocompleted.\n  Autocompleted means the query was changed to the hint. The event handler will\n  be invoked with 3 arguments: the jQuery event object, the suggestion object,\n  and the name of the dataset the suggestion belongs to.\n\n* `autocomplete:redrawn` – Triggered when `appendTo` is used and the wrapper is resized/repositionned.\n\nAll custom events are triggered on the element initialized as the autocomplete.\n\n## API\n\n### jQuery\n\nTurns any `input[type=\"text\"]` element into an auto-completion menu. `options` is an\noptions hash that's used to configure the autocomplete to your liking. Refer to\n[Options](#options) for more info regarding the available configs. Subsequent\narguments (`*datasets`), are individual option hashes for datasets. For more\ndetails regarding datasets, refer to [Datasets](#datasets).\n\n```js\n$('.search-input').autocomplete({\n  minLength: 3\n},\n{\n  name: 'my-dataset',\n  source: mySource\n});\n```\n\n#### jQuery#autocomplete('destroy')\n\nRemoves the autocomplete functionality and reverts the `input` element back to its\noriginal state.\n\n```js\n$('.search-input').autocomplete('destroy');\n```\n\n#### jQuery#autocomplete('open')\n\nOpens the dropdown menu of the autocomplete. Note that being open does not mean that\nthe menu is visible. The menu is only visible when it is open and has content.\n\n```js\n$('.search-input').autocomplete('open');\n```\n\n#### jQuery#autocomplete('close')\n\nCloses the dropdown menu of the autocomplete.\n\n```js\n$('.search-input').autocomplete('close');\n```\n\n#### jQuery#autocomplete('val')\n\nReturns the current value of the autocomplete. The value is the text the user has\nentered into the `input` element.\n\n```js\nvar myVal = $('.search-input').autocomplete('val');\n```\n\n#### jQuery#autocomplete('val', val)\n\nSets the value of the autocomplete. This should be used in place of `jQuery#val`.\n\n```js\n$('.search-input').autocomplete('val', myVal);\n```\n\n#### jQuery.fn.autocomplete.noConflict()\n\nReturns a reference to the autocomplete plugin and reverts `jQuery.fn.autocomplete`\nto its previous value. Can be used to avoid naming collisions.\n\n```js\nvar autocomplete = jQuery.fn.autocomplete.noConflict();\njQuery.fn._autocomplete = autocomplete;\n```\n\n### Standalone\n\nThe standalone version API is similiar to jQuery's:\n\n```js\nvar search = autocomplete('#search', { hint: false }, [{\n  source: autocomplete.sources.hits(index, { hitsPerPage: 5 })\n}]);\n\nsearch.autocomplete.open();\nsearch.autocomplete.close();\nsearch.autocomplete.getVal();\nsearch.autocomplete.setVal('Hey Jude');\nsearch.autocomplete.destroy();\nsearch.autocomplete.getWrapper(); // since autocomplete.js wraps your input into another div, you can access that div\n```\n\nYou can also pass a custom Typeahead instance in Autocomplete.js constructor:\n\n```js\nvar search = autocomplete('#search', { hint: false }, [{ ... }], new Typeahead({ ... }));\n```\n\n#### autocomplete.noConflict()\n\nReturns a reference to the autocomplete plugin and reverts `window.autocomplete`\nto its previous value. Can be used to avoid naming collisions.\n\n```js\nvar algoliaAutocomplete = autocomplete.noConflict();\n```\n\n## Development\n\nTo start developing, you can use the following commands:\n\n```sh\nyarn\nyarn dev\nopen http://localhost:8888/test/playground.html\n```\n\nLinting is done with [eslint](http://eslint.org/) and [Algolia's configuration](https://github.com/algolia/eslint-config-algolia) and can be run with:\n\n```sh\nyarn lint\n```\n\n## Tests\n\nUnit tests are written using [Jasmine](http://jasmine.github.io/) and ran with [Karma](http://karma-runner.github.io/). Integration tests are using [Mocha](http://mochajs.org/) and [Saucelabs](https://saucelabs.com/).\n\nTo run the unit tests suite run:\n\n```sh\nyarn test\n```\n\nTo run the integration tests suite run:\n\n```sh\nyarn build\nyarn server\nngrok 8888\nTEST_HOST=http://YOUR_NGROK_ID.ngrok.com SAUCE_ACCESS_KEY=YOUR_KEY SAUCE_USERNAME=YOUR_USERNAME./node_modules/mocha/bin/mocha --harmony -R spec ./test/integration/test.js\n```\n\n### Testing accessibility\n\nAutocomplete.js is accessible to screen readers, and here's how to test how most blind users will experience it:\n\n#### Steps\n\n1. Run `yarn dev` on your development machine\n1. Start the screen reader\n1. Open a browser to http://YOUR_IP:8888/test/playground.html\n1. Tab to the field\n1. Type a search query\n1. Use the arrow keys to navigate through the results\n\n✔ SUCCESS: results are read (not necessarily in sync with the visually selected cursor)  \n𐄂 FAIL: no text is read or the screen reader keeps reading the typed query\n\n#### Recommended testing platforms\n\n- VoiceOver (CMD+F5 in macOS): Safari, Chrome\n- [JAWS](http://www.freedomscientific.com/Products/Blindness/JAWS): IE11, Chrome (Windows 7 VM available at [modern.ie](https://modern.ie))\n- [NVDA](http://www.nvaccess.org/): IE11, Chrome (Windows 8.1 VM available at [modern.ie](https://modern.ie))\n\n#### Tips\n\n- All screen readers work slightly differently - which makes making accessible pages tricky.\n- Don't worry if the usability isn't 100% perfect, but make sure the functionality is there.\n\n## Release\n\nDecide if this is a patch, minor or major release, have a look at [semver.org](http://semver.org/).\n\n```sh\nnpm run release [major|minor|patch|x.x.x]\n```\n\n## Credits\n\nThis library has originally been forked from [Twitter's typeahead.js](https://github.com/twitter/typeahead.js) library.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/algolia/autocomplete.js.git"
  },
  "scripts": {
    "build": "grunt",
    "dev": "grunt dev",
    "lint": "grunt lint",
    "release": "./release.sh",
    "server": "grunt server",
    "test": "karma start --single-run && grunt lint",
    "test:ci": "./test/ci.sh",
    "test:watch": "karma start"
  },
  "version": "0.30.0"
}
